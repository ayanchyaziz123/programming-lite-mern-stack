const { request, query } = require('express');
const Post = require('../models/posts');



// const categories = () =>{
//     const posts = Post.find();
//     const sorted = posts.reduce((result, post) => {
//         const a = result.find(({ category }) => category === post.category);
//         a ? a.post.push(post) : result.push({ category: post.category, post: [post] });
//         return result;
//     }, []);
//     return sorted;
// }


// categories here
exports.categories = async (req, res, next) => {
   
    try {
        const categories = await Post.find();
        const cats = categories ? categories.reduce((catMemo, { category, title, _id }) => {
            (catMemo[category] = catMemo[category] || []).push([title, _id]);
            return catMemo;
        }, {}) : null;
        res.status(200).json({
            success: true,
            categories: cats
        })


    }
    catch (error) {
        console.log("I am error", error);
        res.status(500).json({
            message: "error"
        })

    }
}



//to create a new post

exports.blogCreate = async (req, res, next) => {
    try {

        const data = req.body.blog;
        const post = await Post.create(data);
        // const post = new Post({
        //     category: request.res.category,
        //     tags: request.res.tags,
        //     title: request.res.title,
        //     description: request.res.description,
        //     author: req.body.author,
        //     content: ,

        // })
        res.status(201).json({
            success: true,
            post
        })

    }
    catch (error) {
        res.status(500).json({
            message: "error"
        })

    }

}

//to get all posts
exports.blogsGet = async (request, response, next) => {
    let k = request.query.keyword;
    let p = request.query.page;
    try {
        if(k == undefined && p == undefined)
        {
            const page = 1;
            const limit = 5;
            const pages = Math.ceil(Object.keys(Post).length / limit);
            const startIndex = (page - 1) * limit;
            const posts = await Post.find().sort({ 'update_at': -1 }).limit(limit).skip(startIndex);
            response.status(200).json(
            {
                success: true,
                count: posts.length,
                posts,
                pages,
                page
            }
        )
        }
        
        else if(k + 10 == 10)
        {
           
            const page = request.query.page;
            const limit = 5;
            const pages = Math.ceil(Object.keys(Post).length / limit);
            const startIndex = (page - 1) * limit;
            console.log("page ", page, startIndex, pages);
            const posts = await Post.find().sort({ 'update_at': -1 }).limit(limit).skip(startIndex).exec();
            console.log(posts.length);
            response.status(200).json(
                {
                    success: true,
                    count: posts.length,
                    posts,
                    pages,
                    page
                }
            )
        }
        else{
            const page = request.query.page;
            const limit = 5;
            const pages = Math.ceil(Object.keys(Post).length / limit);
            const startIndex = (page - 1) * limit
            let result = request.params.keyword;
            let query = String(result);
            const posts = await Post.find(
                {
                    "$or":[
                        {title:{$regex:query}},
                        {description:{$regex:query}}
                    ]
                }
            ).sort({ 'update_at': -1 }).limit(limit).skip(startIndex).exec();
            response.status(200).json(
                {
                    success: true,
                    count: posts.length,
                    posts,
                    pages,
                    page
                }
            )

        }
    }
    catch (error) {
        console.log("error", error);
        response.status(500).json({
            message: "server error"
        });

    }
}

//for getting post details

exports.blogGetById = async (request, response, next) => {
    //const id = request.params.id;
    //console.log("Id ::: ", id);
    try {
        const post = await Post.findById(_id = request.params.id);
        response.json(post);
    }
    catch (error) {
        response.status(500).json({
            message: "server error"
        });

    }


}

exports.blogDelete = async (request, response, next) => {
    try {
        const post = await Post.findByIdAndRemove(request.params.id);
        response.status(300).json({
            post
        })

    }
    catch (error) {
        response.status(500).json(
            {
                message: "server error"
            }
        )

    }
}

exports.editPostById = async (request, response, next) => {
    try {
        const post = await Post.findById(_id = request.params.id);
        response.json(post);
        console.log("Hellow world");
    }
    catch (error) {

    }
}

exports.blogUpdate = async (request, response, next) => {
    try {
        const id = request.params.id; 
        const get_blog = request.body;
        // console.log("Id Avatar 2 2 2 2 2 : ",id, blog);
        const { category, title, description, tags, author, content} = get_blog;
        const blog = new Post({
            _id: id,
            category: category,
            title: title,
            description: description,
            tags: tags, 
            author: author,
            content: content  
        });

        Post.updateOne({ _id: request.params.id }, blog).then(
            () => {
                // res.status(201).json({
                //     message: 'Thing updated successfully!'
                // });
                console.log("success");
            }
        ).catch(
            (error) => {
                // res.status(400).json({
                //     error: error
                // });
                console.log("error");
            }
        );

        

    }
    catch (error) {
        console.log("Error", error);

    }
}


